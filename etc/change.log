This change log details bug fixes, changes, and files added to this project.

2018-07-05 06:50: First Commit: Added graphics files 

2018-07-05 06:58: Created ./etc with stubs for License, Readme, Change.log, and Documention.

2018-07-05 07:12: Updated the change.log to reflect the initial commits. Pushed these changes to origin/master.

2018-07-05 13:30: Created BlackjackLibraries.py and started laying out in the docstring the major classes that will be needed for this attempt.

2018-07-06 08:00: Created the Card class and its __init__() method. No testing of the method to see if it works yet.

2018-07-06 08:30: Created Card.__str__() method. Fully tested the Card class methods to make sure that they work, including printing out a "hand".

2018-07-06 09:00: Created SubClass Ace and its unique __init__() method. Fully tested this subclass, including using it in conditional statements. Commented the correct syntax to use when checking the type of card.

2018-10-18 19:45: Created Class Deck with preamble. Created __init__() method, __len__() method, __str__() method, __del__() method, and remove_top() method. remove_top() removes the card at index 0 and returns it. All of these methods have been fully tested. Cleaned up notes on Classes Card and Ace. Added constants RANKS and SUITS.

2018-10-20: Cleaned up comments in Class Deck. Removed Deck.__del__() method since all it does is write a message. Corrected all comments to reflect this. Added SubClass CardShoe. Added method CardShoe.__init__(). Fully tested CardShoe and its inherited methods and attributes.

2018-10-21 23:37: Created the Hand class. Hand.__init__() simply creates a empty hand for a player that can receive cards from a deal. Hand.__str__() method with diagnostic option has been added. It is setup for the subclasses, but this cannot be fully tested yet. Hand.__len__() method seems to work, but without Hand.receive_card(), this cannot be fully tested either.

2018-10-23 00:25: Created new Class Order Attribute type. This attribute is a constant set to 'regular' for Hand class objects. Each subclass will have a different value for this Class Order Attribute. This allowed the code to be cleared of most of the try/except blocks used to trap NameErrors for attributes unique to a specific type of hand. Began work on Hand.receive_card. This commit will not be pushed to origin since testing has not been done yet.

2018-10-28 21:00: Debugged Hand.__str__() outputs and Hand.receive_card() functionality for regular hands.

2018-11-01 15:15: Built subclass SplitHand. Added attribute bet_amt to Hand and SplitHand classes. Updated Hand.__init__() method to initialize bet_amt with an ante. Updated Hand.__str__() method to print the bet_amt properly.  Changes to Hand methods are fully tested for the Hand and SplitHand classes. Both __init__() methods now raise TypeErrors when the arguments are the wrong type.

2018-11-02 14:35: Built the subclas DealerHand. Created DealerHand.__init__() method. Fixed a bug that identifies Dealer as a Player in Hand.__str__() method. Fixed a bug Hand.__str__() that generates an error with DealerHands. Created DealerHand.dealer_print() method, which conceals the Dealer's hold card when the table prints out. Like Hand.__str__(), it has a diagnostic mode of printout. Pairs, blackjack, presence of Aces, insurance flags, and hand busting fully tested.

2018-11-02 14:45: Fully tested and debugged DealerHand.dealer_print() method in both modes.

2018-11-24 22:40: Preamble for Class Player created. No methods have been coded yet, nor any testing done either.

2018-11-25 23:45: Cleaned up some typos and errors in the preamble. Created Player.__init__() method and did superficial testing of it. Created skeleton for Player.__str__() method, then built the basic print out for Player objects. Basic printout tested for single and split hands.

2018-12-15 09:05: Bullt the diagnostic option or Player.__str__() method. Corrected a programming style problem with the Player.__str__() method reqarding use of NoneType for non-existent objects. Found a bug that is causing Hand.receive_card() to generate a TypeError when Player.hands[].receive_card(CardShoe.remove_top()) is executed. Even when an intermediate variable, card, is used to carry the object, the error is generated. Commenting out the object type check in Hand.receive_card() fixes the problem. It is unclear why __main__.Card is being misinterpreted not of type Card. Removing the check seems to be the only approach that works for now. Fully tested all of the Hand functionality with the printouts. Creating SplitHand objects for Players.hands also works, as does instantiating a new SplitHand object for both Player.hands. The Dealer printouts are still a placeholder.